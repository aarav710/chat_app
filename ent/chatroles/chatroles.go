// Code generated by ent, DO NOT EDIT.

package chatroles

import (
	"fmt"
)

const (
	// Label holds the string label denoting the chatroles type in the database.
	Label = "chat_roles"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// EdgeChat holds the string denoting the chat edge name in mutations.
	EdgeChat = "chat"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the chatroles in the database.
	Table = "chat_roles"
	// ChatTable is the table that holds the chat relation/edge.
	ChatTable = "chat_roles"
	// ChatInverseTable is the table name for the Chat entity.
	// It exists in this package in order to avoid circular dependency with the "chat" package.
	ChatInverseTable = "chats"
	// ChatColumn is the table column denoting the chat relation/edge.
	ChatColumn = "chat_chat_roles"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "chat_roles"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_roles_in_chats"
)

// Columns holds all SQL columns for chatroles fields.
var Columns = []string{
	FieldID,
	FieldRole,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "chat_roles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"chat_chat_roles",
	"user_roles_in_chats",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Role defines the type for the "role" enum field.
type Role string

// Role values.
const (
	RoleROLE_ADMIN       Role = "ROLE_ADMIN"
	RoleROLE_PARTICIPANT Role = "ROLE_PARTICIPANT"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleROLE_ADMIN, RoleROLE_PARTICIPANT:
		return nil
	default:
		return fmt.Errorf("chatroles: invalid enum value for role field: %q", r)
	}
}
