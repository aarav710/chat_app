// Code generated by ent, DO NOT EDIT.

package ent

import (
	"chatapp/backend/ent/chat"
	"chatapp/backend/ent/chatroles"
	"chatapp/backend/ent/predicate"
	"chatapp/backend/ent/user"
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChatRolesQuery is the builder for querying ChatRoles entities.
type ChatRolesQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ChatRoles
	// eager-loading edges.
	withChat *ChatQuery
	withUser *UserQuery
	withFKs  bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ChatRolesQuery builder.
func (crq *ChatRolesQuery) Where(ps ...predicate.ChatRoles) *ChatRolesQuery {
	crq.predicates = append(crq.predicates, ps...)
	return crq
}

// Limit adds a limit step to the query.
func (crq *ChatRolesQuery) Limit(limit int) *ChatRolesQuery {
	crq.limit = &limit
	return crq
}

// Offset adds an offset step to the query.
func (crq *ChatRolesQuery) Offset(offset int) *ChatRolesQuery {
	crq.offset = &offset
	return crq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (crq *ChatRolesQuery) Unique(unique bool) *ChatRolesQuery {
	crq.unique = &unique
	return crq
}

// Order adds an order step to the query.
func (crq *ChatRolesQuery) Order(o ...OrderFunc) *ChatRolesQuery {
	crq.order = append(crq.order, o...)
	return crq
}

// QueryChat chains the current query on the "chat" edge.
func (crq *ChatRolesQuery) QueryChat() *ChatQuery {
	query := &ChatQuery{config: crq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := crq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := crq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(chatroles.Table, chatroles.FieldID, selector),
			sqlgraph.To(chat.Table, chat.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, chatroles.ChatTable, chatroles.ChatColumn),
		)
		fromU = sqlgraph.SetNeighbors(crq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (crq *ChatRolesQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: crq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := crq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := crq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(chatroles.Table, chatroles.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, chatroles.UserTable, chatroles.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(crq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ChatRoles entity from the query.
// Returns a *NotFoundError when no ChatRoles was found.
func (crq *ChatRolesQuery) First(ctx context.Context) (*ChatRoles, error) {
	nodes, err := crq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{chatroles.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (crq *ChatRolesQuery) FirstX(ctx context.Context) *ChatRoles {
	node, err := crq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ChatRoles ID from the query.
// Returns a *NotFoundError when no ChatRoles ID was found.
func (crq *ChatRolesQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = crq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{chatroles.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (crq *ChatRolesQuery) FirstIDX(ctx context.Context) int {
	id, err := crq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ChatRoles entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ChatRoles entity is found.
// Returns a *NotFoundError when no ChatRoles entities are found.
func (crq *ChatRolesQuery) Only(ctx context.Context) (*ChatRoles, error) {
	nodes, err := crq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{chatroles.Label}
	default:
		return nil, &NotSingularError{chatroles.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (crq *ChatRolesQuery) OnlyX(ctx context.Context) *ChatRoles {
	node, err := crq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ChatRoles ID in the query.
// Returns a *NotSingularError when more than one ChatRoles ID is found.
// Returns a *NotFoundError when no entities are found.
func (crq *ChatRolesQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = crq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{chatroles.Label}
	default:
		err = &NotSingularError{chatroles.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (crq *ChatRolesQuery) OnlyIDX(ctx context.Context) int {
	id, err := crq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ChatRolesSlice.
func (crq *ChatRolesQuery) All(ctx context.Context) ([]*ChatRoles, error) {
	if err := crq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return crq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (crq *ChatRolesQuery) AllX(ctx context.Context) []*ChatRoles {
	nodes, err := crq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ChatRoles IDs.
func (crq *ChatRolesQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := crq.Select(chatroles.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (crq *ChatRolesQuery) IDsX(ctx context.Context) []int {
	ids, err := crq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (crq *ChatRolesQuery) Count(ctx context.Context) (int, error) {
	if err := crq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return crq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (crq *ChatRolesQuery) CountX(ctx context.Context) int {
	count, err := crq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (crq *ChatRolesQuery) Exist(ctx context.Context) (bool, error) {
	if err := crq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return crq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (crq *ChatRolesQuery) ExistX(ctx context.Context) bool {
	exist, err := crq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ChatRolesQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (crq *ChatRolesQuery) Clone() *ChatRolesQuery {
	if crq == nil {
		return nil
	}
	return &ChatRolesQuery{
		config:     crq.config,
		limit:      crq.limit,
		offset:     crq.offset,
		order:      append([]OrderFunc{}, crq.order...),
		predicates: append([]predicate.ChatRoles{}, crq.predicates...),
		withChat:   crq.withChat.Clone(),
		withUser:   crq.withUser.Clone(),
		// clone intermediate query.
		sql:    crq.sql.Clone(),
		path:   crq.path,
		unique: crq.unique,
	}
}

// WithChat tells the query-builder to eager-load the nodes that are connected to
// the "chat" edge. The optional arguments are used to configure the query builder of the edge.
func (crq *ChatRolesQuery) WithChat(opts ...func(*ChatQuery)) *ChatRolesQuery {
	query := &ChatQuery{config: crq.config}
	for _, opt := range opts {
		opt(query)
	}
	crq.withChat = query
	return crq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (crq *ChatRolesQuery) WithUser(opts ...func(*UserQuery)) *ChatRolesQuery {
	query := &UserQuery{config: crq.config}
	for _, opt := range opts {
		opt(query)
	}
	crq.withUser = query
	return crq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Role chatroles.Role `json:"role,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ChatRoles.Query().
//		GroupBy(chatroles.FieldRole).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (crq *ChatRolesQuery) GroupBy(field string, fields ...string) *ChatRolesGroupBy {
	grbuild := &ChatRolesGroupBy{config: crq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := crq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return crq.sqlQuery(ctx), nil
	}
	grbuild.label = chatroles.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Role chatroles.Role `json:"role,omitempty"`
//	}
//
//	client.ChatRoles.Query().
//		Select(chatroles.FieldRole).
//		Scan(ctx, &v)
//
func (crq *ChatRolesQuery) Select(fields ...string) *ChatRolesSelect {
	crq.fields = append(crq.fields, fields...)
	selbuild := &ChatRolesSelect{ChatRolesQuery: crq}
	selbuild.label = chatroles.Label
	selbuild.flds, selbuild.scan = &crq.fields, selbuild.Scan
	return selbuild
}

func (crq *ChatRolesQuery) prepareQuery(ctx context.Context) error {
	for _, f := range crq.fields {
		if !chatroles.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if crq.path != nil {
		prev, err := crq.path(ctx)
		if err != nil {
			return err
		}
		crq.sql = prev
	}
	return nil
}

func (crq *ChatRolesQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ChatRoles, error) {
	var (
		nodes       = []*ChatRoles{}
		withFKs     = crq.withFKs
		_spec       = crq.querySpec()
		loadedTypes = [2]bool{
			crq.withChat != nil,
			crq.withUser != nil,
		}
	)
	if crq.withChat != nil || crq.withUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, chatroles.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*ChatRoles).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &ChatRoles{config: crq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, crq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := crq.withChat; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ChatRoles)
		for i := range nodes {
			if nodes[i].chat_chat_roles == nil {
				continue
			}
			fk := *nodes[i].chat_chat_roles
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(chat.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "chat_chat_roles" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Chat = n
			}
		}
	}

	if query := crq.withUser; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*ChatRoles)
		for i := range nodes {
			if nodes[i].user_roles_in_chats == nil {
				continue
			}
			fk := *nodes[i].user_roles_in_chats
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_roles_in_chats" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.User = n
			}
		}
	}

	return nodes, nil
}

func (crq *ChatRolesQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := crq.querySpec()
	_spec.Node.Columns = crq.fields
	if len(crq.fields) > 0 {
		_spec.Unique = crq.unique != nil && *crq.unique
	}
	return sqlgraph.CountNodes(ctx, crq.driver, _spec)
}

func (crq *ChatRolesQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := crq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (crq *ChatRolesQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   chatroles.Table,
			Columns: chatroles.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: chatroles.FieldID,
			},
		},
		From:   crq.sql,
		Unique: true,
	}
	if unique := crq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := crq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatroles.FieldID)
		for i := range fields {
			if fields[i] != chatroles.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := crq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := crq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := crq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := crq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (crq *ChatRolesQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(crq.driver.Dialect())
	t1 := builder.Table(chatroles.Table)
	columns := crq.fields
	if len(columns) == 0 {
		columns = chatroles.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if crq.sql != nil {
		selector = crq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if crq.unique != nil && *crq.unique {
		selector.Distinct()
	}
	for _, p := range crq.predicates {
		p(selector)
	}
	for _, p := range crq.order {
		p(selector)
	}
	if offset := crq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := crq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ChatRolesGroupBy is the group-by builder for ChatRoles entities.
type ChatRolesGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (crgb *ChatRolesGroupBy) Aggregate(fns ...AggregateFunc) *ChatRolesGroupBy {
	crgb.fns = append(crgb.fns, fns...)
	return crgb
}

// Scan applies the group-by query and scans the result into the given value.
func (crgb *ChatRolesGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := crgb.path(ctx)
	if err != nil {
		return err
	}
	crgb.sql = query
	return crgb.sqlScan(ctx, v)
}

func (crgb *ChatRolesGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range crgb.fields {
		if !chatroles.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := crgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := crgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (crgb *ChatRolesGroupBy) sqlQuery() *sql.Selector {
	selector := crgb.sql.Select()
	aggregation := make([]string, 0, len(crgb.fns))
	for _, fn := range crgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(crgb.fields)+len(crgb.fns))
		for _, f := range crgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(crgb.fields...)...)
}

// ChatRolesSelect is the builder for selecting fields of ChatRoles entities.
type ChatRolesSelect struct {
	*ChatRolesQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (crs *ChatRolesSelect) Scan(ctx context.Context, v interface{}) error {
	if err := crs.prepareQuery(ctx); err != nil {
		return err
	}
	crs.sql = crs.ChatRolesQuery.sqlQuery(ctx)
	return crs.sqlScan(ctx, v)
}

func (crs *ChatRolesSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := crs.sql.Query()
	if err := crs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
