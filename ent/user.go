// Code generated by ent, DO NOT EDIT.

package ent

import (
	"chatapp/backend/ent/login"
	"chatapp/backend/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Bio holds the value of the "bio" field.
	Bio string `json:"bio,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges          UserEdges `json:"edges"`
	login_user     *int
	user_followers *int
	user_following *int
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Login holds the value of the login edge.
	Login *Login `json:"login,omitempty"`
	// UserFollowers holds the value of the user_followers edge.
	UserFollowers *User `json:"user_followers,omitempty"`
	// Followers holds the value of the followers edge.
	Followers []*User `json:"followers,omitempty"`
	// UserFollowings holds the value of the user_followings edge.
	UserFollowings *User `json:"user_followings,omitempty"`
	// Following holds the value of the following edge.
	Following []*User `json:"following,omitempty"`
	// Messages holds the value of the messages edge.
	Messages []*Message `json:"messages,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// LoginOrErr returns the Login value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) LoginOrErr() (*Login, error) {
	if e.loadedTypes[0] {
		if e.Login == nil {
			// The edge login was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: login.Label}
		}
		return e.Login, nil
	}
	return nil, &NotLoadedError{edge: "login"}
}

// UserFollowersOrErr returns the UserFollowers value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) UserFollowersOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.UserFollowers == nil {
			// The edge user_followers was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UserFollowers, nil
	}
	return nil, &NotLoadedError{edge: "user_followers"}
}

// FollowersOrErr returns the Followers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FollowersOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.Followers, nil
	}
	return nil, &NotLoadedError{edge: "followers"}
}

// UserFollowingsOrErr returns the UserFollowings value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) UserFollowingsOrErr() (*User, error) {
	if e.loadedTypes[3] {
		if e.UserFollowings == nil {
			// The edge user_followings was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UserFollowings, nil
	}
	return nil, &NotLoadedError{edge: "user_followings"}
}

// FollowingOrErr returns the Following value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FollowingOrErr() ([]*User, error) {
	if e.loadedTypes[4] {
		return e.Following, nil
	}
	return nil, &NotLoadedError{edge: "following"}
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) MessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[5] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldBio:
			values[i] = new(sql.NullString)
		case user.ForeignKeys[0]: // login_user
			values[i] = new(sql.NullInt64)
		case user.ForeignKeys[1]: // user_followers
			values[i] = new(sql.NullInt64)
		case user.ForeignKeys[2]: // user_following
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldBio:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bio", values[i])
			} else if value.Valid {
				u.Bio = value.String
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field login_user", value)
			} else if value.Valid {
				u.login_user = new(int)
				*u.login_user = int(value.Int64)
			}
		case user.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_followers", value)
			} else if value.Valid {
				u.user_followers = new(int)
				*u.user_followers = int(value.Int64)
			}
		case user.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_following", value)
			} else if value.Valid {
				u.user_following = new(int)
				*u.user_following = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryLogin queries the "login" edge of the User entity.
func (u *User) QueryLogin() *LoginQuery {
	return (&UserClient{config: u.config}).QueryLogin(u)
}

// QueryUserFollowers queries the "user_followers" edge of the User entity.
func (u *User) QueryUserFollowers() *UserQuery {
	return (&UserClient{config: u.config}).QueryUserFollowers(u)
}

// QueryFollowers queries the "followers" edge of the User entity.
func (u *User) QueryFollowers() *UserQuery {
	return (&UserClient{config: u.config}).QueryFollowers(u)
}

// QueryUserFollowings queries the "user_followings" edge of the User entity.
func (u *User) QueryUserFollowings() *UserQuery {
	return (&UserClient{config: u.config}).QueryUserFollowings(u)
}

// QueryFollowing queries the "following" edge of the User entity.
func (u *User) QueryFollowing() *UserQuery {
	return (&UserClient{config: u.config}).QueryFollowing(u)
}

// QueryMessages queries the "messages" edge of the User entity.
func (u *User) QueryMessages() *MessageQuery {
	return (&UserClient{config: u.config}).QueryMessages(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("bio=")
	builder.WriteString(u.Bio)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
