// Code generated by MockGen. DO NOT EDIT.
// Source: users/repo/user_repo.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	ent "chatapp/backend/ent"
	users "chatapp/backend/users"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// AddUserToChat mocks base method.
func (m *MockUserRepo) AddUserToChat(userId, chatId int) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToChat", userId, chatId)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserToChat indicates an expected call of AddUserToChat.
func (mr *MockUserRepoMockRecorder) AddUserToChat(userId, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToChat", reflect.TypeOf((*MockUserRepo)(nil).AddUserToChat), userId, chatId)
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(userRequest users.UserRequest, login *ent.Login) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", userRequest, login)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(userRequest, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), userRequest, login)
}

// DeleteUser mocks base method.
func (m *MockUserRepo) DeleteUser(userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepoMockRecorder) DeleteUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepo)(nil).DeleteUser), userId)
}

// FindUsersByChatId mocks base method.
func (m *MockUserRepo) FindUsersByChatId(chatId int) ([]*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsersByChatId", chatId)
	ret0, _ := ret[0].([]*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsersByChatId indicates an expected call of FindUsersByChatId.
func (mr *MockUserRepoMockRecorder) FindUsersByChatId(chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsersByChatId", reflect.TypeOf((*MockUserRepo)(nil).FindUsersByChatId), chatId)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepo) GetUserByEmail(email string) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepoMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepo)(nil).GetUserByEmail), email)
}

// GetUserById mocks base method.
func (m *MockUserRepo) GetUserById(id int) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", id)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserRepoMockRecorder) GetUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserRepo)(nil).GetUserById), id)
}

// GetUserByUid mocks base method.
func (m *MockUserRepo) GetUserByUid(uid string) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUid", uid)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUid indicates an expected call of GetUserByUid.
func (mr *MockUserRepoMockRecorder) GetUserByUid(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUid", reflect.TypeOf((*MockUserRepo)(nil).GetUserByUid), uid)
}

// GetUsersContainingUsername mocks base method.
func (m *MockUserRepo) GetUsersContainingUsername(username string) ([]*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersContainingUsername", username)
	ret0, _ := ret[0].([]*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersContainingUsername indicates an expected call of GetUsersContainingUsername.
func (mr *MockUserRepoMockRecorder) GetUsersContainingUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersContainingUsername", reflect.TypeOf((*MockUserRepo)(nil).GetUsersContainingUsername), username)
}

// IsUserInChat mocks base method.
func (m *MockUserRepo) IsUserInChat(userId, chatId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserInChat", userId, chatId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserInChat indicates an expected call of IsUserInChat.
func (mr *MockUserRepoMockRecorder) IsUserInChat(userId, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserInChat", reflect.TypeOf((*MockUserRepo)(nil).IsUserInChat), userId, chatId)
}

// RemoveUserFromChat mocks base method.
func (m *MockUserRepo) RemoveUserFromChat(userId, chatId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromChat", userId, chatId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromChat indicates an expected call of RemoveUserFromChat.
func (mr *MockUserRepoMockRecorder) RemoveUserFromChat(userId, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromChat", reflect.TypeOf((*MockUserRepo)(nil).RemoveUserFromChat), userId, chatId)
}

// UpdateUser mocks base method.
func (m *MockUserRepo) UpdateUser(userRequest users.UserRequest, userId int) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", userRequest, userId)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepoMockRecorder) UpdateUser(userRequest, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepo)(nil).UpdateUser), userRequest, userId)
}
