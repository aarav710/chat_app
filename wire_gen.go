// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	auth2 "chatapp/backend/auth"
	"chatapp/backend/chats/controller"
	"chatapp/backend/chats/repo"
	"chatapp/backend/chats/service"
	"chatapp/backend/di"
	"chatapp/backend/ent"
	repo3 "chatapp/backend/login/repo"
	controller2 "chatapp/backend/users/controller"
	repo2 "chatapp/backend/users/repo"
	service2 "chatapp/backend/users/service"
	"context"
	"firebase.google.com/go/v4/auth"
	"github.com/gin-gonic/gin"
)

// Injectors from di.go:

func InitializeDI(context2 context.Context, router *gin.Engine, db *ent.Client, auth3 *auth.Client) di.Controllers {
	chatRepoImpl := repo.NewChatRepo(db, context2)
	userRepoImpl := repo2.NewUserRepo(context2, db)
	chatServiceImpl := service.NewChatService(chatRepoImpl, userRepoImpl)
	authService := auth2.NewAuthService(auth3, context2)
	loginRepoImpl := repo3.NewLoginRepo(context2, db)
	userServiceImpl := service2.NewUserService(userRepoImpl, loginRepoImpl, authService)
	chatControllerImpl := controller.NewChatController(router, chatServiceImpl, authService, userServiceImpl)
	userControllerImpl := controller2.NewUserController(router, userServiceImpl, authService)
	controllers := di.NewControllers(chatControllerImpl, userControllerImpl)
	return controllers
}
